When would you want to create a remote repository rather than keeping all your work local?
	When collaborating with other developers.
	When working from different environments.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	So that you can work independantly on an area of development, keep that sand-boxed from the remote repository, possibly as your 'master' and avoid version control complexity that would arise if you constantly downloading the central 'master'.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	
	Fork is not actually a Git command. It is a GitHub command. Fork clones a repository from GitHub to GitHub. It keeps a reference back to the original repositlory.
	
	Clone is a Git command. It is typically used to copy a repository from GitHub to a local copy when you start contributing to development.
	Clone can also be used local to local.

	Branch is a Git command, typically used locally to create a new Git controlled version away from the master branch. I believe GitHub allows this too, creating a branch centrally.

What is the benefit of having a copy of the last known state of the remote stored locally?
	You can limit or eliminate divergance.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Without Git or GitHub collaboration would be harder. Separation of responsibility would be important to avoid overlap and conflicts. More project management controls would be needed to avoid complex problems managing code, testing etc. Overall progress could be slowed.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	simpler to make changes directly in the master. Much more linear.
	However if there are others collaborating, then they will be making changes too. Both developers ought to create branchea for their changes, issue them as pull requests, so they can me reviewed and merged to master.
	There can be complexity when two or more developers are committing change at the same time. When you have a change out on a pull request and someone moves the master forwards, then you need to pull down the master, resolve merge conflicts, commit and push up such that your pull request is updated and can then be merged with the master.



